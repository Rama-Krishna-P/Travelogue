// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Trip.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Trip TABLE
class TableTrip extends SqfEntityTableBase {
  TableTrip() {
    // declare properties of EntityTable
    tableName = 'trip';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('fromDate', DbType.text),
      SqfEntityFieldBase('toDate', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTrip();
  }
}

// Place TABLE
class TablePlace extends SqfEntityTableBase {
  TablePlace() {
    // declare properties of EntityTable
    tableName = 'place';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('type', DbType.text),
      SqfEntityFieldBase('startDate', DbType.text),
      SqfEntityFieldBase('stopDate', DbType.text),
      SqfEntityFieldBase('dateCreated', DbType.text),
      SqfEntityFieldBase('latitude', DbType.real),
      SqfEntityFieldBase('longitude', DbType.real),
      SqfEntityFieldRelationshipBase(TableTrip.getInstance, DeleteRule.CASCADE),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePlace();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    databaseTables = [
      TableTrip.getInstance,
      TablePlace.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Trip
class Trip {
  Trip({this.id, this.name, this.fromDate, this.toDate, this.isDeleted}) {
    setDefaultValues();
  }
  Trip.withFields(this.name, this.fromDate, this.toDate, this.isDeleted) {
    setDefaultValues();
  }
  Trip.withId(this.id, this.name, this.fromDate, this.toDate, this.isDeleted) {
    setDefaultValues();
  }
  Trip.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    name = o['name'] as String;

    fromDate = o['fromDate'] as String;

    toDate = o['toDate'] as String;

    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS
  int id;
  String name;
  String fromDate;
  String toDate;
  bool isDeleted;
  // end FIELDS

// COLLECTIONS
  PlaceFilterBuilder getPlaces(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Place()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .tripId
        .equals(id)
        .and;
  }
// END COLLECTIONS

  static const bool _softDeleteActivated = true;
  TripManager __mnTrip;

  TripManager get _mnTrip {
    return __mnTrip = __mnTrip ?? TripManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (fromDate != null) {
      map['fromDate'] = fromDate;
    }

    if (toDate != null) {
      map['toDate'] = toDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (fromDate != null) {
      map['fromDate'] = fromDate;
    }

    if (toDate != null) {
      map['toDate'] = toDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS
    if (!forQuery) {
      map['places'] = await getPlaces().toMapList();
    }
// END COLLECTIONS

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, name, fromDate, toDate, isDeleted];
  }

  static Future<List<Trip>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Trip.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Trip>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Trip>();
    try {
      objList = list
          .map((trip) => Trip.fromMap(trip as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Trip.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Trip>> fromObjectList(Future<List<dynamic>> o) async {
    final tripsList = List<Trip>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      tripsList.add(Trip.fromMap(data[i] as Map<String, dynamic>));
    }
    return tripsList;
  }

  static List<Trip> fromMapList(List<Map<String, dynamic>> query) {
    final List<Trip> trips = List<Trip>();
    for (Map map in query) {
      trips.add(Trip.fromMap(map as Map<String, dynamic>));
    }
    return trips;
  }

  /// returns Trip by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Trip if exist, otherwise returns null
  Future<Trip> getById(int id) async {
    Trip tripObj;
    final data = await _mnTrip.getById(id);
    if (data.length != 0) {
      tripObj = Trip.fromMap(data[0] as Map<String, dynamic>);
    } else {
      tripObj = null;
    }
    return tripObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTrip.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Trip. Returns a new Primary Key value of Trip

  /// <returns>Returns a new Primary Key value of Trip
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Trip> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Trip> trips) async {
    final results = _mnTrip.saveAll(
        'INSERT OR REPLACE INTO trip (id,  name, fromDate, toDate,isDeleted)  VALUES (?,?,?,?,?)',
        trips);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnTrip.rawInsert(
        'INSERT OR REPLACE INTO trip (id,  name, fromDate, toDate,isDeleted)  VALUES (?,?,?,?,?)',
        [id, name, fromDate, toDate, isDeleted]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Trip> trips) async {
    final results = await _mnTrip.rawInsertAll(
        'INSERT OR REPLACE INTO trip (id,  name, fromDate, toDate,isDeleted)  VALUES (?,?,?,?,?)',
        trips);
    return results;
  }

  /// Deletes Trip

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Trip invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Place().select().tripId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    } else if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnTrip
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTrip.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Trip>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Trip invoked (id=$id)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await Place()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .tripId
          .equals(id)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    } else {
      return _mnTrip.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private TripFilterBuilder _Select;
  TripFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return TripFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TripFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TripFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  //end methods
}
// endregion trip

// region TripField
class TripField extends SearchCriteria {
  TripField(this.tripFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TripFilterBuilder tripFB;

  TripField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TripFilterBuilder equals(var pValue) {
    param.expression = '=';
    tripFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tripFB.parameters, param, SqlSyntax.EQuals,
            tripFB._addedBlocks)
        : setCriteria(pValue, tripFB.parameters, param, SqlSyntax.NotEQuals,
            tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder isNull() {
    tripFB._addedBlocks = setCriteria(
        0,
        tripFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tripFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tripFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tripFB._addedBlocks);
      _waitingNot = '';
      tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
          tripFB._addedBlocks.retVal;
    }
    return tripFB;
  }

  TripFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tripFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tripFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tripFB._addedBlocks);
      _waitingNot = '';
      tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
          tripFB._addedBlocks.retVal;
      tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
          tripFB._addedBlocks.retVal;
    }
    return tripFB;
  }

  TripFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tripFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tripFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tripFB._addedBlocks);
      _waitingNot = '';
      tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
          tripFB._addedBlocks.retVal;
    }
    return tripFB;
  }

  TripFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tripFB._addedBlocks = setCriteria(
          pFirst,
          tripFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tripFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tripFB._addedBlocks = setCriteria(pFirst, tripFB.parameters, param,
            SqlSyntax.LessThan, tripFB._addedBlocks);
      } else {
        tripFB._addedBlocks = setCriteria(pFirst, tripFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tripFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tripFB._addedBlocks = setCriteria(pLast, tripFB.parameters, param,
            SqlSyntax.GreaterThan, tripFB._addedBlocks);
      } else {
        tripFB._addedBlocks = setCriteria(pLast, tripFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tripFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tripFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tripFB.parameters, param, SqlSyntax.GreaterThan,
            tripFB._addedBlocks)
        : setCriteria(pValue, tripFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tripFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tripFB.parameters, param, SqlSyntax.LessThan,
            tripFB._addedBlocks)
        : setCriteria(pValue, tripFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tripFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tripFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tripFB._addedBlocks)
        : setCriteria(pValue, tripFB.parameters, param, SqlSyntax.LessThan,
            tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tripFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tripFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tripFB._addedBlocks)
        : setCriteria(pValue, tripFB.parameters, param, SqlSyntax.GreaterThan,
            tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }

  TripFilterBuilder inValues(var pValue) {
    tripFB._addedBlocks = setCriteria(
        pValue,
        tripFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tripFB._addedBlocks);
    _waitingNot = '';
    tripFB._addedBlocks.needEndBlock[tripFB._blockIndex] =
        tripFB._addedBlocks.retVal;
    return tripFB;
  }
}
// endregion TripField

// region TripFilterBuilder
class TripFilterBuilder extends SearchCriteria {
  TripFilterBuilder(Trip obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Trip _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  TripFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  TripFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  TripFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TripFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TripFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TripFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TripFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TripFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TripFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  TripFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TripField setField(TripField field, String colName, DbType dbtype) {
    return TripField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TripField _id;
  TripField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TripField _name;
  TripField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  TripField _fromDate;
  TripField get fromDate {
    return _fromDate = setField(_fromDate, 'fromDate', DbType.text);
  }

  TripField _toDate;
  TripField get toDate {
    return _toDate = setField(_toDate, 'toDate', DbType.text);
  }

  TripField _isDeleted;
  TripField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Trip._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Trip> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final placeidList = await toListPrimaryKey(false);
    await Place().select().tripId.inValues(placeidList).delete(hardDelete);

    if (Trip._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTrip.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTrip.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Trip batch invoked');
    final placeidList = await toListPrimaryKey(false);
    await Place()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .tripId
        .inValues(placeidList)
        .update({'isDeleted': 0});
    return _obj._mnTrip.updateBatch(qparams, {'isDeleted': 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTrip.updateBatch(qparams, values);
  }

  /// This method always returns TripObj if exist, otherwise returns null
  /// <returns>List<Trip>
  Future<Trip> toSingle([VoidCallback trip(Trip o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTrip.toList(qparams);
    final data = await objFuture;
    Trip retVal;
    if (data.isNotEmpty) {
      retVal = Trip.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (trip != null) {
      trip(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback tripCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tripsFuture = await _obj._mnTrip.toList(qparams);
    final int count = tripsFuture[0]['CNT'] as int;
    if (tripCount != null) {
      tripCount(count);
    }
    return count;
  }

  /// This method always returns List<Trip>.
  /// <returns>List<Trip>
  Future<List<Trip>> toList([VoidCallback tripList(List<Trip> o)]) async {
    final List<Trip> tripsData = List<Trip>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      tripsData.add(Trip.fromMap(data[i] as Map<String, dynamic>));
    }
    if (tripList != null) tripList(tripsData);
    return tripsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTrip.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Trip>>
  Future<List<DropdownMenuItem<Trip>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Trip>> o)]) async {
    _buildParameters();
    final tripsFuture = _obj._mnTrip.toList(qparams);

    final data = await tripsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Trip>> items = List()
      ..add(DropdownMenuItem(
        value: Trip(),
        child: Text('Select Trip'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Trip.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final tripsFuture = _obj._mnTrip.toList(qparams);

    final data = await tripsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Trip'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnTrip.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTrip.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Trip.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTrip.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TripFilterBuilder

// region TripFields
class TripFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fFromDate;
  static TableField get fromDate {
    return _fFromDate =
        _fFromDate ?? SqlSyntax.setField(_fFromDate, 'fromDate', DbType.text);
  }

  static TableField _fToDate;
  static TableField get toDate {
    return _fToDate =
        _fToDate ?? SqlSyntax.setField(_fToDate, 'toDate', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TripFields

//region TripManager
class TripManager extends SqfEntityProvider {
  TripManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'trip';
  static String _colId = 'id';
}

//endregion TripManager
// region Place
class Place {
  Place(
      {this.id,
      this.name,
      this.type,
      this.startDate,
      this.stopDate,
      this.dateCreated,
      this.latitude,
      this.longitude,
      this.tripId,
      this.isDeleted}) {
    setDefaultValues();
  }
  Place.withFields(
      this.name,
      this.type,
      this.startDate,
      this.stopDate,
      this.dateCreated,
      this.latitude,
      this.longitude,
      this.tripId,
      this.isDeleted) {
    setDefaultValues();
  }
  Place.withId(
      this.id,
      this.name,
      this.type,
      this.startDate,
      this.stopDate,
      this.dateCreated,
      this.latitude,
      this.longitude,
      this.tripId,
      this.isDeleted) {
    setDefaultValues();
  }
  Place.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    name = o['name'] as String;

    type = o['type'] as String;

    startDate = o['startDate'] as String;

    stopDate = o['stopDate'] as String;

    dateCreated = o['dateCreated'] as String;

    latitude = o['latitude'] as double;

    longitude = o['longitude'] as double;

    tripId = o['tripId'] as int;

    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS
  int id;
  String name;
  String type;
  String startDate;
  String stopDate;
  String dateCreated;
  double latitude;
  double longitude;
  int tripId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  Future<Trip> getTrip([VoidCallback trip(Trip o)]) async {
    final obj = await Trip().getById(tripId);
    if (trip != null) {
      trip(obj);
    }
    return obj;
  }
  // END RELATIONSHIPS

  static const bool _softDeleteActivated = true;
  PlaceManager __mnPlace;

  PlaceManager get _mnPlace {
    return __mnPlace = __mnPlace ?? PlaceManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (startDate != null) {
      map['startDate'] = startDate;
    }

    if (stopDate != null) {
      map['stopDate'] = stopDate;
    }

    if (dateCreated != null) {
      map['dateCreated'] = dateCreated;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (tripId != null) {
      map['tripId'] = tripId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (startDate != null) {
      map['startDate'] = startDate;
    }

    if (stopDate != null) {
      map['stopDate'] = stopDate;
    }

    if (dateCreated != null) {
      map['dateCreated'] = dateCreated;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (tripId != null) {
      map['tripId'] = tripId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [
      id,
      name,
      type,
      startDate,
      stopDate,
      dateCreated,
      latitude,
      longitude,
      tripId,
      isDeleted
    ];
  }

  static Future<List<Place>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Place.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Place>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Place>();
    try {
      objList = list
          .map((place) => Place.fromMap(place as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Place.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Place>> fromObjectList(Future<List<dynamic>> o) async {
    final placesList = List<Place>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      placesList.add(Place.fromMap(data[i] as Map<String, dynamic>));
    }
    return placesList;
  }

  static List<Place> fromMapList(List<Map<String, dynamic>> query) {
    final List<Place> places = List<Place>();
    for (Map map in query) {
      places.add(Place.fromMap(map as Map<String, dynamic>));
    }
    return places;
  }

  /// returns Place by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Place if exist, otherwise returns null
  Future<Place> getById(int id) async {
    Place placeObj;
    final data = await _mnPlace.getById(id);
    if (data.length != 0) {
      placeObj = Place.fromMap(data[0] as Map<String, dynamic>);
    } else {
      placeObj = null;
    }
    return placeObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnPlace.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Place. Returns a new Primary Key value of Place

  /// <returns>Returns a new Primary Key value of Place
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Place> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Place> places) async {
    final results = _mnPlace.saveAll(
        'INSERT OR REPLACE INTO place (id,  name, type, startDate, stopDate, dateCreated, latitude, longitude, tripId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        places);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnPlace.rawInsert(
        'INSERT OR REPLACE INTO place (id,  name, type, startDate, stopDate, dateCreated, latitude, longitude, tripId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        [
          id,
          name,
          type,
          startDate,
          stopDate,
          dateCreated,
          latitude,
          longitude,
          tripId,
          isDeleted
        ]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Place> places) async {
    final results = await _mnPlace.rawInsertAll(
        'INSERT OR REPLACE INTO place (id,  name, type, startDate, stopDate, dateCreated, latitude, longitude, tripId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        places);
    return results;
  }

  /// Deletes Place

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Place invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnPlace
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPlace.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Place>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Place invoked (id=$id)');
    {
      return _mnPlace.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private PlaceFilterBuilder _Select;
  PlaceFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return PlaceFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PlaceFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PlaceFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  //end methods
}
// endregion place

// region PlaceField
class PlaceField extends SearchCriteria {
  PlaceField(this.placeFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  PlaceFilterBuilder placeFB;

  PlaceField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PlaceFilterBuilder equals(var pValue) {
    param.expression = '=';
    placeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, placeFB.parameters, param, SqlSyntax.EQuals,
            placeFB._addedBlocks)
        : setCriteria(pValue, placeFB.parameters, param, SqlSyntax.NotEQuals,
            placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder isNull() {
    placeFB._addedBlocks = setCriteria(
        0,
        placeFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      placeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          placeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          placeFB._addedBlocks);
      _waitingNot = '';
      placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
          placeFB._addedBlocks.retVal;
    }
    return placeFB;
  }

  PlaceFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      placeFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          placeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          placeFB._addedBlocks);
      _waitingNot = '';
      placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
          placeFB._addedBlocks.retVal;
      placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
          placeFB._addedBlocks.retVal;
    }
    return placeFB;
  }

  PlaceFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      placeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          placeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          placeFB._addedBlocks);
      _waitingNot = '';
      placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
          placeFB._addedBlocks.retVal;
    }
    return placeFB;
  }

  PlaceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      placeFB._addedBlocks = setCriteria(
          pFirst,
          placeFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          placeFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        placeFB._addedBlocks = setCriteria(pFirst, placeFB.parameters, param,
            SqlSyntax.LessThan, placeFB._addedBlocks);
      } else {
        placeFB._addedBlocks = setCriteria(pFirst, placeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, placeFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        placeFB._addedBlocks = setCriteria(pLast, placeFB.parameters, param,
            SqlSyntax.GreaterThan, placeFB._addedBlocks);
      } else {
        placeFB._addedBlocks = setCriteria(pLast, placeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, placeFB._addedBlocks);
      }
    }
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    placeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, placeFB.parameters, param, SqlSyntax.GreaterThan,
            placeFB._addedBlocks)
        : setCriteria(pValue, placeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    placeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, placeFB.parameters, param, SqlSyntax.LessThan,
            placeFB._addedBlocks)
        : setCriteria(pValue, placeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    placeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, placeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, placeFB._addedBlocks)
        : setCriteria(pValue, placeFB.parameters, param, SqlSyntax.LessThan,
            placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    placeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, placeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, placeFB._addedBlocks)
        : setCriteria(pValue, placeFB.parameters, param, SqlSyntax.GreaterThan,
            placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }

  PlaceFilterBuilder inValues(var pValue) {
    placeFB._addedBlocks = setCriteria(
        pValue,
        placeFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        placeFB._addedBlocks);
    _waitingNot = '';
    placeFB._addedBlocks.needEndBlock[placeFB._blockIndex] =
        placeFB._addedBlocks.retVal;
    return placeFB;
  }
}
// endregion PlaceField

// region PlaceFilterBuilder
class PlaceFilterBuilder extends SearchCriteria {
  PlaceFilterBuilder(Place obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Place _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  PlaceFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  PlaceFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  PlaceFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  PlaceFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  PlaceFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  PlaceFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  PlaceFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  PlaceFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  PlaceFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  PlaceFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  PlaceField setField(PlaceField field, String colName, DbType dbtype) {
    return PlaceField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  PlaceField _id;
  PlaceField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  PlaceField _name;
  PlaceField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  PlaceField _type;
  PlaceField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  PlaceField _startDate;
  PlaceField get startDate {
    return _startDate = setField(_startDate, 'startDate', DbType.text);
  }

  PlaceField _stopDate;
  PlaceField get stopDate {
    return _stopDate = setField(_stopDate, 'stopDate', DbType.text);
  }

  PlaceField _dateCreated;
  PlaceField get dateCreated {
    return _dateCreated = setField(_dateCreated, 'dateCreated', DbType.text);
  }

  PlaceField _latitude;
  PlaceField get latitude {
    return _latitude = setField(_latitude, 'latitude', DbType.real);
  }

  PlaceField _longitude;
  PlaceField get longitude {
    return _longitude = setField(_longitude, 'longitude', DbType.real);
  }

  PlaceField _tripId;
  PlaceField get tripId {
    return _tripId = setField(_tripId, 'tripId', DbType.integer);
  }

  PlaceField _isDeleted;
  PlaceField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Place._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Place> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Place._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPlace.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPlace.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Place batch invoked');
    return _obj._mnPlace.updateBatch(qparams, {'isDeleted': 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnPlace.updateBatch(qparams, values);
  }

  /// This method always returns PlaceObj if exist, otherwise returns null
  /// <returns>List<Place>
  Future<Place> toSingle([VoidCallback place(Place o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPlace.toList(qparams);
    final data = await objFuture;
    Place retVal;
    if (data.isNotEmpty) {
      retVal = Place.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (place != null) {
      place(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback placeCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final placesFuture = await _obj._mnPlace.toList(qparams);
    final int count = placesFuture[0]['CNT'] as int;
    if (placeCount != null) {
      placeCount(count);
    }
    return count;
  }

  /// This method always returns List<Place>.
  /// <returns>List<Place>
  Future<List<Place>> toList([VoidCallback placeList(List<Place> o)]) async {
    final List<Place> placesData = List<Place>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      placesData.add(Place.fromMap(data[i] as Map<String, dynamic>));
    }
    if (placeList != null) placeList(placesData);
    return placesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPlace.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Place>>
  Future<List<DropdownMenuItem<Place>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Place>> o)]) async {
    _buildParameters();
    final placesFuture = _obj._mnPlace.toList(qparams);

    final data = await placesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Place>> items = List()
      ..add(DropdownMenuItem(
        value: Place(),
        child: Text('Select Place'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Place.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final placesFuture = _obj._mnPlace.toList(qparams);

    final data = await placesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Place'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPlace.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnPlace.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Place.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnPlace.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PlaceFilterBuilder

// region PlaceFields
class PlaceFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }

  static TableField _fStartDate;
  static TableField get startDate {
    return _fStartDate = _fStartDate ??
        SqlSyntax.setField(_fStartDate, 'startDate', DbType.text);
  }

  static TableField _fStopDate;
  static TableField get stopDate {
    return _fStopDate =
        _fStopDate ?? SqlSyntax.setField(_fStopDate, 'stopDate', DbType.text);
  }

  static TableField _fDateCreated;
  static TableField get dateCreated {
    return _fDateCreated = _fDateCreated ??
        SqlSyntax.setField(_fDateCreated, 'dateCreated', DbType.text);
  }

  static TableField _fLatitude;
  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.real);
  }

  static TableField _fLongitude;
  static TableField get longitude {
    return _fLongitude = _fLongitude ??
        SqlSyntax.setField(_fLongitude, 'longitude', DbType.real);
  }

  static TableField _fTripId;
  static TableField get tripId {
    return _fTripId =
        _fTripId ?? SqlSyntax.setField(_fTripId, 'tripId', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PlaceFields

//region PlaceManager
class PlaceManager extends SqfEntityProvider {
  PlaceManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'place';
  static String _colId = 'id';
}

//endregion PlaceManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
